#include <ArduinoJson.h>  // https://arduinojson.org/
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient
#include <Wire.h>
#include <DallasTemperature.h>  // Includes the Dallas Temperature library
#include <OneWire.h>  // Includes the One Wire library
#include <TinyGsmClient.h>
#include <HardwareSerial.h>
#include <TinyGPS++.h>

#define STATE_PIN 15
#define CMD_PIN 35

const char  *DEVICE_ID = "FACA01"; //Definir el dispositiu

// TTGO T-Call pins
#define MODEM_RST            5
#define MODEM_PWKEY          4
#define MODEM_POWER_ON       23
#define MODEM_TX             27
#define MODEM_RX             26
#define I2C_SDA              21
#define I2C_SCL              22
// Set serial for AT commands (to SIM800 module)
#define SerialAT Serial1

#define IP5306_ADDR          0x75
#define IP5306_REG_SYS_CTL0  0x00

// Configure TinyGSM library
#define TINY_GSM_MODEM_SIM800      // Modem is SIM800
#define TINY_GSM_RX_BUFFER   1024  // Set RX buffer to 1Kb

#define DS18B20_SEN1 32  // Number pin where the sensor 1 is connected
#define DS18B20_SEN2 35  // Number pin where the sensor 2 is connected
#define DS18B20_SEN3 34  // Number pin where the sensor 3 is connected
#define BUTTON 14  // Number pin pushbutton signal

#define RX_PIN 9 // Pinout RX of ESP32
#define TX_PIN 10 // Pinout TX of ESP32

TinyGsm modem(SerialAT);
// TinyGSM Client for Internet connection
TinyGsmClient client(modem);
  
// Posar les credencials GPRS
const char apn[]      = ""; // APN
const char gprsUser[] = ""; // GPRS User
const char gprsPass[] = ""; // GPRS Password
const char simPIN[]   = ""; //Pin SIM

const char  *DEVICE_ID = "CM0001"; //Definir el dispositiu

// Add MQTT Broker settings
const char *MQTT_BROKER_IP = "XXXXXXXXXXXXXXXXX";
const int MQTT_PORT = 1883;
const char *MQTT_USER = "xxxxxx";
const char *MQTT_PASSWORD = "xxxxxxx";
const bool RETAINED = true;

PubSubClient mqttClient(wifiClient);

void setup() {
  // Set GSM module baud rate and UART pins
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  // Start SIM800 module
  modem.init();

  pinMode(STATE_PIN, INPUT); // Pinout as input
  pinMode(CMD_PIN, OUTPUT); // Pinout as output
  
  SerialGPS.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN); // Starts gps communication with UART
  
  mqttClient.setCallback(callback); // Prepare what to do when a message is recieved
  mqttClient.setServer(MQTT_BROKER_IP, MQTT_PORT); // Connect the configured mqtt broker
  
  connectToMqttBroker();  // Connects to the configured mqtt broker
  setSubscriptions();     // Subscribe defined topics

}

void loop() {
  checkConnections(); // We check the connection every time

  // Publish every 10 seconds
  static int nowTime = millis();
  static int startTime = 0;
  static int elapsedTime = 0;
  nowTime = millis();
  elapsedTime = nowTime - startTime;
  if (elapsedTime >= 5000) {
    publishTruck();  
    startTime = nowTime;
  }
}

void publishTruck() {
  static String state;
  static const String topicStr = createTopic("state");
  static const char *topic = topicStr.c_str();
  
  if (STATE_PIN) {
    state = "1";
  } else {
    state = "0";
  }
  
  mqttClient.publish(topic, state.c_str(), RETAINED);
}

void callback(char *topic, byte *payload, unsigned int length) {
  // Register all subscription topics
  static const String cmdTopicStr = createTopic(COMMAND_TOPIC);

  String msg = unwrapMessage(payload, length);
  
      if (msg == String(1)) {
      digitalWrite(CMD_PIN, HIGH);
      }else{
       digitalWrite(CMD_PIN, LOW); 
      }
 }
 
void setSubscriptions() {
 
  subscribe(COMMAND_TOPIC);
}

void subscribe(char *newTopic) {
  const String topicStr = createTopic(newTopic);
  const char *topic = topicStr.c_str();
  
  mqttClient.subscribe(topic, QoS);
}

String unwrapMessage(byte *message, unsigned int length) {
  String msg;
  for (int i = 0; i < length; i++) { // Unwraps the string message
    msg += (char)message[i];
  }
  return msg;
}

String createTopic(char *topic) {
  String topicStr =  String(DEVICE_ID) + "/" + topic;
  return topicStr;
}

void connectToMqttBroker() {

  mqttClient.connect(macAddress, MQTT_USER, MQTT_PASSWORD);// Using unique mac address from ESP32
  while (!mqttClient.connected()) {
    delay(500);
    mqttClient.connect(macAddress); // Using unique mac address from ESP32
  }
}
