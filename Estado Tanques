#include <ArduinoJson.h>  // https://arduinojson.org/
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient
#include <WiFi.h>
#include <Wire.h>
#include <DallasTemperature.h>  // Includes the Dallas Temperature library
#include <OneWire.h>  // Includes the One Wire library

#define DS18B20_SEN1 17  // Number pin where the sensor 1 is connected
#define DS18B20_SEN2 21  // Number pin where the sensor 2 is connected
#define DS18B20_SEN3 23  // Number pin where the sensor 3 is connected
#define ECHO_PIN 35 // Analog input that receives the echo signal
#define TRIG_PIN 34 // Digital output that sends the trigger signal

const char  *DEVICE_ID = "MATK01"; //Definir el dispositiu

OneWire oneWire1(DS18B20_SEN1); //Declara Pin 17 com bus OneWire
OneWire oneWire2(DS18B20_SEN2); //Declara Pin 21 com bus OneWire
OneWire oneWire3(DS18B20_SEN3); //Declara Pin 23 com bus OneWire

DallasTemperature SenTemp1(&oneWire1); //Declara variable per sensor 1
DallasTemperature SenTemp2(&oneWire2); //Declara variable per sensor 2
DallasTemperature SenTemp3(&oneWire3); //Declara variable per sensor 3

// Replace the next variables with your Wi-Fi SSID/Password
const char *WIFI_SSID = "xxxxx";
const char *WIFI_PASSWORD = "xxxxx";
char macAddress[18];

// Add MQTT Broker settings
const char *MQTT_BROKER_IP = "XXXXXXXXXXXXXXXXX";
const int MQTT_PORT = 1883;
const char *MQTT_USER = "xxxxxx";
const char *MQTT_PASSWORD = "xxxxxxx";
const bool RETAINED = true;

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setup() {

  mqttClient.setServer(MQTT_BROKER_IP, MQTT_PORT); // Connect the configured mqtt broker

  connectToWiFiNetwork(); // Connects to the configured network
  connectToMqttBroker();  // Connects to the configured mqtt broker

  SenTemp1.begin(); // Starts sensor 1
  SenTemp2.begin(); // Starts sensor 2
  SenTemp3.begin(); // Starts sensor 3

  pinMode(ECHO_PIN, INPUT);  // Sets the ECHO_PIN as an Input
  pinMode(TRIG_PIN, OUTPUT); // Sets the TRIG_PIN as an Output

}

void loop() {
  checkConnections(); // We check the connection every time

  // Publish every 10 seconds
  static int nowTime = millis();
  static int startTime = 0;
  static int elapsedTime = 0;
  nowTime = millis();
  elapsedTime = nowTime - startTime;
  if (elapsedTime >= 10000) {
    SenTemp1.requestTemperatures();
    SenTemp2.requestTemperatures();
    SenTemp3.requestTemperatures();
    publishTank();  
    startTime = nowTime;
  }
}

/* Publicar dades ambient 1 granja*/
void publishTank() {
  static const String topicStr = createTopic("Tank");
  static const char *topic = topicStr.c_str();

  StaticJsonDocument<128> doc; // Create JSON document of 128 bytes
  char buffer[128]; // Create the buffer where we will print the JSON document
                    // to publish through MQTT
                    
  doc["temp1"] = SenTemp1.getTempCByIndex(0);
  doc["temp2"] = SenTemp2.getTempCByIndex(0);
  doc["temp3"] = SenTemp3.getTempCByIndex(0);
  doc["level"] = getLevel();
  
  // Serialize the JSON document to a buffer in order to publish it
  serializeJson(doc, buffer);
  mqttClient.publish(topic, buffer, RETAINED);
}

String getLevel() {
  digitalWrite(TRIG_PIN, LOW); // Clear the TRIG_PIN by setting it LOW
  delayMicroseconds(5);

  // Trigger the sensor by setting the TRIG_PIN to HIGH for 10 microseconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH); // pulseIn() returns the duration (length of the pulse) in microseconds
  long distance = duration * 0.034 / 2; // Returns the distance in cm

  long level = (400.0 - distance) * 100.0 / 400.0; //Nivell en % considerant tank de 4m
  
  return String(level); // Returns the distance in cm
}

String createTopic(char *topic) {
  String topicStr =  String(DEVICE_ID) + "/" + topic;
  return topicStr;
}

void connectToWiFiNetwork() {

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  
  String macAddressStr = WiFi.macAddress().c_str();
  strcpy(macAddress, macAddressStr.c_str());
}

void connectToMqttBroker() {

  mqttClient.connect(macAddress, MQTT_USER, MQTT_PASSWORD);// Using unique mac address from ESP32
  while (!mqttClient.connected()) {
    delay(500);
    mqttClient.connect(macAddress); // Using unique mac address from ESP32
  }
}

void checkConnections() {
  if (mqttClient.connected()) {
    mqttClient.loop();
  } else { // Try to reconnect
    if (WiFi.status() != WL_CONNECTED) { // Check wifi connection
      connectToWiFiNetwork(); // Reconnect Wifi
    }
    connectToMqttBroker(); // Reconnect Server MQTT Broker
  }
}
