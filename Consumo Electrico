#include <ArduinoJson.h>  // https://arduinojson.org/
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient
#include <WiFi.h>
#include <Wire.h>
#include <PZEM004Tv30.h>
#include <SoftwareSerial.h>

#define TX_PIN 1    // Defines TX pin number
#define RX_PIN 3    // Defines RX pin number

const char  *DEVICE_ID = "FACE01"; //Definir el dispositiu

//SoftwareSerial pzemSerial(TX_PIN,RX_PIN);
PZEM004Tv30 pzem(&Serial2,1);

// Replace the next variables with your Wi-Fi SSID/Password
const char *WIFI_SSID = "xxxxx";
const char *WIFI_PASSWORD = "xxxxx";
char macAddress[18];

// Add MQTT Broker settings
const char *MQTT_BROKER_IP = "XXXXXXXXXXXXXXXXX";
const int MQTT_PORT = 1883;
const char *MQTT_USER = "xxxxxx";
const char *MQTT_PASSWORD = "xxxxxxx";
const bool RETAINED = true;

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setup() {

  mqttClient.setServer(MQTT_BROKER_IP, MQTT_PORT); // Connect the configured mqtt broker

  connectToWiFiNetwork(); // Connects to the configured network
  connectToMqttBroker();  // Connects to the configured mqtt broker

  Serial.begin(9600);

}

void loop() {
  checkConnections(); // We check the connection every time

  // Publish every 10 seconds
  static int nowTime = millis();
  static int startTime = 0;
  static int elapsedTime = 0;
  nowTime = millis();
  elapsedTime = nowTime - startTime;
  if (elapsedTime >= 10000) {
    publishConsum();  
    startTime = nowTime;
  }
}

/* Publicar dades ambient 1 granja*/
void publishConsum() {
  static const String topicStr = createTopic("Amb");
  static const char *topic = topicStr.c_str();

  StaticJsonDocument<128> doc; // Create JSON document of 128 bytes
  char buffer[128]; // Create the buffer where we will print the JSON document
                    // to publish through MQTT
                    
  doc["Vol"] = pzem.voltage();
  doc["Cur"] = pzem.current();
  doc["Pow"] = pzem.power();
  doc["Ene"] = pzem.energy();
  doc["pf"] = pzem.pf();

  // Serialize the JSON document to a buffer in order to publish it
  serializeJson(doc, buffer);
  mqttClient.publish(topic, buffer, RETAINED);
}


String createTopic(char *topic) {
  String topicStr =  String(DEVICE_ID) + "/" + topic;
  return topicStr;
}

void connectToWiFiNetwork() {

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  
  String macAddressStr = WiFi.macAddress().c_str();
  strcpy(macAddress, macAddressStr.c_str());
}

void connectToMqttBroker() {

  mqttClient.connect(macAddress, MQTT_USER, MQTT_PASSWORD);// Using unique mac address from ESP32
  while (!mqttClient.connected()) {
    delay(500);
    mqttClient.connect(macAddress); // Using unique mac address from ESP32
  }
}

void checkConnections() {
  if (mqttClient.connected()) {
    mqttClient.loop();
  } else { // Try to reconnect
    if (WiFi.status() != WL_CONNECTED) { // Check wifi connection
      connectToWiFiNetwork(); // Reconnect Wifi
    }
    connectToMqttBroker(); // Reconnect Server MQTT Broker
  }
}
