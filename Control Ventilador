#include <ArduinoJson.h>  // https://arduinojson.org/
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient
#include <WiFi.h>

#define STATE_PIN 15
#define CMD_PIN 35

#define COMMAND_TOPIC "cmd"     // Define new subscription topics here

const char  *DEVICE_ID = "MAGR02"; //Definir el dispositiu

// Replace the next variables with your Wi-Fi SSID/Password
const char *WIFI_SSID = "xxxxx";
const char *WIFI_PASSWORD = "xxxxx";
char macAddress[18];

// Add MQTT Broker settings
const char *MQTT_BROKER_IP = "XXXXXXXXXXXXXXXXX";
const int MQTT_PORT = 1883;
const char *MQTT_USER = "xxxxxx";
const char *MQTT_PASSWORD = "xxxxxxx";
const bool RETAINED = true;
const int QoS = 0; // Quality of Service for the subscriptions

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setup() {
  
  pinMode(STATE_PIN, INPUT); // Pinout as input
  pinMode(CMD_PIN, OUTPUT); // Pinout as output

  mqttClient.setServer(MQTT_BROKER_IP,MQTT_PORT); // Connect the configured mqtt broker
  
  mqttClient.setCallback(callback); // Prepare what to do when a message is recieved

  connectToWiFiNetwork(); // Connects to the configured network
  connectToMqttBroker();  // Connects to the configured mqtt broker
  setSubscriptions();     // Subscribe defined topics

}

void loop() {
  checkConnections(); // We check the connection every time

  // Publish every 10 seconds
  static int nowTime = millis();
  static int startTime = 0;
  static int elapsedTime = 0;
  nowTime = millis();
  elapsedTime = nowTime - startTime;
  if (elapsedTime >= 10000) {
    publishFanState();   // Publishes a small json
    startTime = nowTime;
  }
}

/* Publicar estat ventilador granja*/
void publishFanState() {
  static String state;
  static const String topicStr = createTopic("state");
  static const char *topic = topicStr.c_str();
  
  if (STATE_PIN) {
    state = "1";
  } else {
    state = "0";
  }
  
  mqttClient.publish(topic, state.c_str(), RETAINED);
}

void callback(char *topic, byte *payload, unsigned int length) {
  // Register all subscription topics
  static const String cmdTopicStr = createTopic(COMMAND_TOPIC);

  String msg = unwrapMessage(payload, length);
  
      if (msg == String(1)) {
      digitalWrite(CMD_PIN, HIGH);
      }else{
       digitalWrite(CMD_PIN, LOW); 
      }
 }
 
void setSubscriptions() {
 
  subscribe(COMMAND_TOPIC);
}

void subscribe(char *newTopic) {
  const String topicStr = createTopic(newTopic);
  const char *topic = topicStr.c_str();
  
  mqttClient.subscribe(topic, QoS);
}

String unwrapMessage(byte *message, unsigned int length) {
  String msg;
  for (int i = 0; i < length; i++) { // Unwraps the string message
    msg += (char)message[i];
  }
  return msg;
}

String createTopic(char *topic) {
  String topicStr = String(DEVICE_ID) + "/" + topic;
  return topicStr;
}

void connectToWiFiNetwork() {

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void connectToMqttBroker() {

  mqttClient.connect(macAddress, MQTT_USER, MQTT_PASSWORD);// Using unique mac address from ESP32
  while (!mqttClient.connected()) {
    delay(500);
    mqttClient.connect(macAddress); // Using unique mac address from ESP32
  }
}

void checkConnections() {
  if (mqttClient.connected()) {
    mqttClient.loop();
  } else { // Try to reconnect
    if (WiFi.status() != WL_CONNECTED) { // Check wifi connection
      connectToWiFiNetwork(); // Reconnect Wifi
    }
    connectToMqttBroker(); // Reconnect Server MQTT Broker
  }
}
