#include <ArduinoJson.h>  // https://arduinojson.org/
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient
#include <Wire.h>
#include <DallasTemperature.h>  // Includes the Dallas Temperature library
#include <OneWire.h>  // Includes the One Wire library
#include <TinyGsmClient.h>
#include <HardwareSerial.h>
#include <TinyGPS++.h>

// TTGO T-Call pins
#define MODEM_RST            5
#define MODEM_PWKEY          4
#define MODEM_POWER_ON       23
#define MODEM_TX             27
#define MODEM_RX             26
#define I2C_SDA              21
#define I2C_SCL              22
// Set serial for AT commands (to SIM800 module)
#define SerialAT Serial1

#define IP5306_ADDR          0x75
#define IP5306_REG_SYS_CTL0  0x00

// Configure TinyGSM library
#define TINY_GSM_MODEM_SIM800      // Modem is SIM800
#define TINY_GSM_RX_BUFFER   1024  // Set RX buffer to 1Kb

#define DS18B20_SEN1 32  // Number pin where the sensor 1 is connected
#define DS18B20_SEN2 35  // Number pin where the sensor 2 is connected
#define DS18B20_SEN3 34  // Number pin where the sensor 3 is connected
#define BUTTON 14  // Number pin pushbutton signal

#define RX_PIN 9 // Pinout RX of ESP32
#define TX_PIN 10 // Pinout TX of ESP32

TinyGsm modem(SerialAT);
// TinyGSM Client for Internet connection
TinyGsmClient client(modem);
  
// Posar les credencials GPRS
const char apn[]      = ""; // APN
const char gprsUser[] = ""; // GPRS User
const char gprsPass[] = ""; // GPRS Password
const char simPIN[]   = ""; //Pin SIM

const char  *DEVICE_ID = "CM0001"; //Definir el dispositiu

OneWire oneWire1(DS18B20_SEN1); //Declara Pin 17 com bus OneWire
OneWire oneWire2(DS18B20_SEN2); //Declara Pin 21 com bus OneWire
OneWire oneWire3(DS18B20_SEN3); //Declara Pin 23 com bus OneWire

DallasTemperature SenTemp1(&oneWire1); //Declara variable per sensor 1
DallasTemperature SenTemp2(&oneWire2); //Declara variable per sensor 2
DallasTemperature SenTemp3(&oneWire3); //Declara variable per sensor 3


// Add MQTT Broker settings
const char *MQTT_BROKER_IP = "XXXXXXXXXXXXXXXXX";
const int MQTT_PORT = 1883;
const char *MQTT_USER = "xxxxxx";
const char *MQTT_PASSWORD = "xxxxxxx";
const bool RETAINED = true;

PubSubClient mqttClient(wifiClient);

void setup() {
  // Set GSM module baud rate and UART pins
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  // Start SIM800 module
  modem.init();

  SerialGPS.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN); // Starts gps communication with UART
  
  ds18b20Sensor.begin();
  
  mqttClient.setServer(MQTT_BROKER_IP, MQTT_PORT); // Connect the configured mqtt broker
  connectToMqttBroker();  // Connects to the configured mqtt broker

  SenTemp1.begin(); // Starts sensor 1
  SenTemp2.begin(); // Starts sensor 2
  SenTemp3.begin(); // Starts sensor 3

}

void loop() {
  checkConnections(); // We check the connection every time

  // Publish every 10 seconds
  static int nowTime = millis();
  static int startTime = 0;
  static int elapsedTime = 0;
  nowTime = millis();
  elapsedTime = nowTime - startTime;
  if (elapsedTime >= 10000) {
    if (SerialGPS.available()) {
    gps.encode(SerialGPS.read()); // Encodes all messages from GPS
    }
    SenTemp1.requestTemperatures();
    SenTemp2.requestTemperatures();
    SenTemp3.requestTemperatures();
    publishTruck();  
    startTime = nowTime;
  }
}

void publishTruck() {
  static const String topicStr = createTopic("Tank");
  static const char *topic = topicStr.c_str();

  StaticJsonDocument<128> doc; // Create JSON document of 128 bytes
  char buffer[128]; // Create the buffer where we will print the JSON document
                    // to publish through MQTT
                    
  doc["temp1"] = SenTemp1.getTempCByIndex(0);
  doc["temp2"] = SenTemp2.getTempCByIndex(0);
  doc["temp3"] = SenTemp3.getTempCByIndex(0);
  doc["lat"] = gps.location.lat();  // Latitude in degrees (double)
  doc["lon"] = gps.location.lng();  // Longitude in degrees (double)
  doc["level"] = BUTTON;
  
  // Serialize the JSON document to a buffer in order to publish it
  serializeJson(doc, buffer);
  mqttClient.publish(topic, buffer, RETAINED);
}

String createTopic(char *topic) {
  String topicStr =  String(DEVICE_ID) + "/" + topic;
  return topicStr;
}

void connectToMqttBroker() {

  mqttClient.connect(macAddress, MQTT_USER, MQTT_PASSWORD);// Using unique mac address from ESP32
  while (!mqttClient.connected()) {
    delay(500);
    mqttClient.connect(macAddress); // Using unique mac address from ESP32
  }
}
